}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
plot(temps,height,xlim=c(0,35))
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
for(i in 1:100){
new_temps3 <- rmvnorm(n=1, temps[obs_index], sigma=as.matrix(Qt))
points(new_temps3,height[obs_index],col='green',type='o')
}
Qt
mean(c(Qt[1,1],Qt[1,2]))
ull_Qt[,2] <- Qt[1,1] - mean(c(Qt[1,1],Qt[1,2]))
full_Qt[1,2] <- Qt[1,1] - mean(c(Qt[1,1],Qt[1,2]))
full_Qt <- array(NA,dim=c(length(depths),length(depths)))
full_Qt[1,2] <- Qt[1,1] - mean(c(Qt[1,1],Qt[1,2]))
full_Qt
full_Qt[1,1] <- Qt[1,1]
full_Qt[1,2] <- Qt[1,1] - mean(c(Qt[1,1],Qt[1,2]))
full_Qt[1,3] <- mean(c(Qt[1,1],Qt[1,2])) - Qt[1,2]
full_Qt[1,4] <- Qt[1,2]
full_Qt
Qt[1,
]
full_Qt[1,1] <- Qt[1,1]
full_Qt[1,2] <- Qt[1,1] - mean(c(Qt[1,1],Qt[1,2]))
full_Qt[1,3] <- mean(c(Qt[1,1],Qt[1,2])) - Qt[1,2]
full_Qt[1,4] <- Qt[1,2]
full_Qt[1,5] <- Qt[1,2] - mean(c(Qt[1,2],Qt[1,3]))
full_Qt[1,6] <- mean(c(Qt[1,2],Qt[1,3])) - Qt[1,3]
full_Qt[1,7] <- Qt[1,3]
full_Qt
Qt[1,3]
mean(c(Qt[1,2],Qt[1,3])) - Qt[1,3]
Qt[1,3]
mean(c(Qt[1,2],Qt[1,3]))
mean(c(Qt[1,2],Qt[1,3])) - Qt[1,3]
Qt[1,2] - mean(c(Qt[1,2],Qt[1,3]))
approxfun(index,Qt[1,])
index <- seq(0,10,1)
approxfun(index,Qt[1,])
Qt[1,]
seq(0,10,1)
index <- seq(1,10,1)
inter <- approxfun(index,Qt[1,])
index <- c(0.1,1,2,3,4,5,6,7,8,9)
inter <- approxfun(index,Qt[1,])
inter(depths)
index <- c(0.1,1,2,3,4,5,6,7,8,9)
inter <- approxfun(index,Qt[1,],rule = 2)
inter(depths)
index <- c(0.1,1,2,3,4,5,6,7,8,9)
inter <- approxfun(index,Qt[1,],rule = 2)
full_Qt[1,] <- inter(depths)
full_Qt[,1] <- inter(depths)
full_Qt
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
working_directory =  '/Users/quinn/Dropbox (VTFRS)/Research/DAPPER_ENKF/DAPPER/'
EnKF_directory = paste(working_directory, "analysis_tools/", sep = "")
input_directory = paste('/Users/quinn/Dropbox (VTFRS)/Research/', '/DAPPER_inputdata/', sep = "")
output_directory = paste('/Users/quinn/Dropbox (VTFRS)/Research/DAPPER_ENKF/', 'DAPPER/analysis_tools/', sep = "")
plotlist = c(40001)
### comparison of LAI observations
### Duke LAI measurements
original_mean_monthly = read.csv(file = paste(EnKF_directory,"/landsat_mean_monthly_LAI.csv", sep = ""), header = TRUE, sep = ",")
mean_monthly = original_mean_monthly
duke_original_data = read.csv(file = paste(EnKF_directory,"/duke_input.csv", sep = ""), header = TRUE, sep = ",")
duke_realdata = duke_original_data[which(duke_original_data$PlotID == plotlist), ]
duke_observed = duke_realdata[which(duke_realdata$LAI != "NA" & duke_realdata$LAI != -99 & duke_realdata$Age != -99 & (duke_realdata$Month == 11 | duke_realdata$Month == 12 | duke_realdata$Month == 1 | duke_realdata$Month == 2 | duke_realdata$Month == 3)),]
duke_observed = duke_realdata[which(duke_realdata$LAI != "NA" & duke_realdata$LAI != -99 & duke_realdata$Age != -99 & (duke_realdata$Month == 12 | duke_realdata$Month == 1 | duke_realdata$Month == 2)),]
duke_observed = duke_realdata[which(duke_realdata$LAI != "NA" & duke_realdata$LAI != -99 & duke_realdata$Age != -99),]
lai_comparison = array(NA, dim = c(length(1984:2017)*12,5))
k = 1
for (y in 1984:2017)
{
for (m in 1:12)
{
lai_comparison[k,3] = y
lai_comparison[k,4] = m
if (length(duke_observed[which(duke_observed$Year == y & duke_observed$Month == m),6]) > 0){
lai_comparison[k,1] = duke_observed[which(duke_observed$Year == y & duke_observed$Month == m),6]
}
if(length(mean_monthly[which(mean_monthly$Year == y & mean_monthly$Month == m),6] >0)){
#lai_comparison[k,1] = duke_observed[which(duke_observed$Year == y & duke_observed$Month == m),6]
lai_comparison[k,2] = mean_monthly[which(mean_monthly$Year == y & mean_monthly$Month == m),6]
lai_comparison[k,5] = lai_comparison[k,1] - lai_comparison[k,2]
}
k = k+1
}
}
#lai_comparison = lai_comparison[which(lai_comparison[ ,1] != "NA"),]
plot(lai_comparison[,3] + (1/12)*lai_comparison[,4]-(1/12), lai_comparison[,1], col = 'black', ylim = c(0,4),type='o', xlab=c('Year'),ylab=c('LAI'))
points(lai_comparison[,3] + (1/12)*lai_comparison[,4]-(1/12), lai_comparison[,2], col = 'red',type='o')
#lines(lai_comparison[,3] + (1/12)*lai_comparison[,4]-(1/12), lai_comparison[,5], col = 'green')
legend(x = "topleft",inset = 0,
legend = c("Site observed","Landsat-dervived"),col=c('black','red'),pch=c(1,1),bty='n')
lai_comparison = lai_comparison[which(lai_comparison[ ,1] != "NA"),]
plot(lai_comparison[,3] + (1/12)*lai_comparison[,4]-(1/12), lai_comparison[,1], col = 'black', ylim = c(0,4),type='o', xlab=c('Year'),ylab=c('LAI'))
points(lai_comparison[,3] + (1/12)*lai_comparison[,4]-(1/12), lai_comparison[,2], col = 'red',type='o')
#lines(lai_comparison[,3] + (1/12)*lai_comparison[,4]-(1/12), lai_comparison[,5], col = 'green')
legend(x = "topleft",inset = 0,
legend = c("Site observed","Landsat-dervived"),col=c('black','red'),pch=c(1,1),bty='n')
##### choose plot for EnKF analysis
## TRIAL 1
#plotlist = c(40001) #Duke Forest 40001, 40005
focal_plotID = plotlist #
setwd(EnKF_directory)
obs_set = 14 #Select which plots are used in analysis.  See prepare_obs.R for number guide
#### source required functions
source('prepare_update_states.R')
source('update_states.R')
source('EnKF_DAPPER.R')
#### define variables needed for DAPPER functions
nmembers = 100
NO_UNCERT = FALSE
USE_OBS_CONTRAINT = TRUE
PARAMETER_UNCERT = TRUE
plotnum = 1
all_studies = c('/Duke/TIER4_Duke')
priors_file = 'duke_priors.csv'
restart_chain <- c('DAPPER_MCMC_chain_6Nov17.Rdata')
load(paste(working_directory,'/chains/',restart_chain,sep=''))
years = NULL
### parameters shared across trials
sigma_Fr = 0.005#0.03876204 # variation in fr from step to step in model
LAI_uncert = 0.07 #gamma_lai# variation in lai from step to step, comes from chain
FR_lower_bound = 0.3
psi = 0.613 #1 # uncertainty in lai observations #From Blinn et al.
run_name = 'LANDSAT_trial_1'
original_mean_monthly = read.csv(file = paste(EnKF_directory,"/landsat_mean_monthly_LAI.csv", sep = ""), header = TRUE, sep = ",")
mean_monthly = original_mean_monthly[which(original_mean_monthly$Year>1983 & original_mean_monthly$Year<2010 & original_mean_monthly$Month != 4),]*2
obs_used = "winter"
title = paste("sigma_Fr = ", sigma_Fr, ", psi = ", psi^2, ", obs = ", obs_used, ", LAI_uncert = ", LAI_uncert, sep = "")
print(title)
EnKF_DAPPER(psi,
observed = mean_monthly,
sigma_Fr,
LAI_uncert,
run_name =  run_name,
start_clearcut = TRUE,
FIX_FR = FALSE,
USE_OBS_CONTRAINT,
forecast_year = 2015,
FR_lower_bound = FR_lower_bound,
PARAMETER_UNCERT)
#output_LANDSAT_1 <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#output_field_all_months <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#t_end = nrow(output_field_all_months)
#range_fr = range(output_field_all_months[t_end,,7])
mean_monthly
##### choose plot for EnKF analysis
## TRIAL 1
#plotlist = c(40001) #Duke Forest 40001, 40005
focal_plotID = plotlist #
setwd(EnKF_directory)
obs_set = 14 #Select which plots are used in analysis.  See prepare_obs.R for number guide
#### source required functions
source('prepare_update_states.R')
source('update_states.R')
source('EnKF_DAPPER.R')
#### define variables needed for DAPPER functions
nmembers = 100
NO_UNCERT = FALSE
USE_OBS_CONTRAINT = TRUE
PARAMETER_UNCERT = TRUE
plotnum = 1
all_studies = c('/Duke/TIER4_Duke')
priors_file = 'duke_priors.csv'
restart_chain <- c('DAPPER_MCMC_chain_6Nov17.Rdata')
load(paste(working_directory,'/chains/',restart_chain,sep=''))
years = NULL
### parameters shared across trials
sigma_Fr = 0.005#0.03876204 # variation in fr from step to step in model
LAI_uncert = 0.07 #gamma_lai# variation in lai from step to step, comes from chain
FR_lower_bound = 0.3
psi = 0.613 #1 # uncertainty in lai observations #From Blinn et al.
run_name = 'LANDSAT_trial_1'
original_mean_monthly = read.csv(file = paste(EnKF_directory,"/landsat_mean_monthly_LAI.csv", sep = ""), header = TRUE, sep = ",")
mean_monthly = original_mean_monthly[which(original_mean_monthly$Year>1983 & original_mean_monthly$Year<2010 & original_mean_monthly$Month != 4),]
mean_monthly$LAI = mean_monthly$LAI*2
obs_used = "winter"
title = paste("sigma_Fr = ", sigma_Fr, ", psi = ", psi^2, ", obs = ", obs_used, ", LAI_uncert = ", LAI_uncert, sep = "")
print(title)
EnKF_DAPPER(psi,
observed = mean_monthly,
sigma_Fr,
LAI_uncert,
run_name =  run_name,
start_clearcut = TRUE,
FIX_FR = FALSE,
USE_OBS_CONTRAINT,
forecast_year = 2015,
FR_lower_bound = FR_lower_bound,
PARAMETER_UNCERT)
#output_LANDSAT_1 <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#output_field_all_months <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#t_end = nrow(output_field_all_months)
#range_fr = range(output_field_all_months[t_end,,7])
##### choose plot for EnKF analysis
## TRIAL 1
#plotlist = c(40001) #Duke Forest 40001, 40005
focal_plotID = plotlist #
setwd(EnKF_directory)
obs_set = 14 #Select which plots are used in analysis.  See prepare_obs.R for number guide
#### source required functions
source('prepare_update_states.R')
source('update_states.R')
source('EnKF_DAPPER.R')
#### define variables needed for DAPPER functions
nmembers = 100
NO_UNCERT = FALSE
USE_OBS_CONTRAINT = TRUE
PARAMETER_UNCERT = TRUE
plotnum = 1
all_studies = c('/Duke/TIER4_Duke')
priors_file = 'duke_priors.csv'
restart_chain <- c('DAPPER_MCMC_chain_6Nov17.Rdata')
load(paste(working_directory,'/chains/',restart_chain,sep=''))
years = NULL
### parameters shared across trials
sigma_Fr = 0.005#0.03876204 # variation in fr from step to step in model
LAI_uncert = 0.07 #gamma_lai# variation in lai from step to step, comes from chain
FR_lower_bound = 0.3
psi = 0.613 #1 # uncertainty in lai observations #From Blinn et al.
run_name = 'LANDSAT_trial_1'
original_mean_monthly = read.csv(file = paste(EnKF_directory,"/landsat_mean_monthly_LAI.csv", sep = ""), header = TRUE, sep = ",")
mean_monthly = original_mean_monthly[which(original_mean_monthly$Year>1983 & original_mean_monthly$Year<2010 & original_mean_monthly$Month != 4),]
mean_monthly$LAI = mean_monthly$LAI*1.25
obs_used = "winter"
title = paste("sigma_Fr = ", sigma_Fr, ", psi = ", psi^2, ", obs = ", obs_used, ", LAI_uncert = ", LAI_uncert, sep = "")
print(title)
EnKF_DAPPER(psi,
observed = mean_monthly,
sigma_Fr,
LAI_uncert,
run_name =  run_name,
start_clearcut = TRUE,
FIX_FR = FALSE,
USE_OBS_CONTRAINT,
forecast_year = 2015,
FR_lower_bound = FR_lower_bound,
PARAMETER_UNCERT)
#output_LANDSAT_1 <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#output_field_all_months <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#t_end = nrow(output_field_all_months)
#range_fr = range(output_field_all_months[t_end,,7])
##### choose plot for EnKF analysis
## TRIAL 1
#plotlist = c(40001) #Duke Forest 40001, 40005
focal_plotID = plotlist #
setwd(EnKF_directory)
obs_set = 14 #Select which plots are used in analysis.  See prepare_obs.R for number guide
#### source required functions
source('prepare_update_states.R')
source('update_states.R')
source('EnKF_DAPPER.R')
#### define variables needed for DAPPER functions
nmembers = 100
NO_UNCERT = FALSE
USE_OBS_CONTRAINT = TRUE
PARAMETER_UNCERT = TRUE
plotnum = 1
all_studies = c('/Duke/TIER4_Duke')
priors_file = 'duke_priors.csv'
restart_chain <- c('DAPPER_MCMC_chain_6Nov17.Rdata')
load(paste(working_directory,'/chains/',restart_chain,sep=''))
years = NULL
### parameters shared across trials
sigma_Fr = 0.005#0.03876204 # variation in fr from step to step in model
LAI_uncert = 0.07 #gamma_lai# variation in lai from step to step, comes from chain
FR_lower_bound = 0.3
psi = 0.613 #1 # uncertainty in lai observations #From Blinn et al.
run_name = 'LANDSAT_trial_1'
original_mean_monthly = read.csv(file = paste(EnKF_directory,"/landsat_mean_monthly_LAI.csv", sep = ""), header = TRUE, sep = ",")
mean_monthly = original_mean_monthly[which(original_mean_monthly$Year>1983 & original_mean_monthly$Year<2010 & original_mean_monthly$Month != 4),]
mean_monthly$LAI = mean_monthly$LAI*0.75
obs_used = "winter"
title = paste("sigma_Fr = ", sigma_Fr, ", psi = ", psi^2, ", obs = ", obs_used, ", LAI_uncert = ", LAI_uncert, sep = "")
print(title)
EnKF_DAPPER(psi,
observed = mean_monthly,
sigma_Fr,
LAI_uncert,
run_name =  run_name,
start_clearcut = TRUE,
FIX_FR = FALSE,
USE_OBS_CONTRAINT,
forecast_year = 2015,
FR_lower_bound = FR_lower_bound,
PARAMETER_UNCERT)
#output_LANDSAT_1 <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#output_field_all_months <-   readRDS(paste(EnKF_directory, "/x_", run_name, ".RDS", sep = ""))
#t_end = nrow(output_field_all_months)
#range_fr = range(output_field_all_months[t_end,,7])
2 + 2
hist(rnorm(1000,0,1))
# Cross-Scale Interactions Module ####
# This module was initially developed by Carey, C.C. and K.J. Farrell. 13 Aug. 2017.
# Macrosystems EDDIE: Cross-Scale Interactions. Macrosystems EDDIE Module 2, Version 1.
# module2.macrosystemseddie.org
# Module development was supported by NSF EF 1702506.
# R code for students to work through the module activities A, B, and C.
# This module consists of 6 objectives. Activity A consists of Objectives 1-2,
# Activity B consists of Objectives 3-4, & Activity C consists of Objectives 5-6.
########## ACTIVITY A - OBJECTIVE 1 ############################################
# Download R packages and GLM files onto your computer.
install.packages('sp') # NOTE: depending on your computer, you may get output
#  that says, "There is a binary version available. Do you want to install from
#  sources that need compilation? y/n" If this pops up, type 'y' (without the
#  quotes) and hit enter. You may now be prompted to download the command line
#  developer tools in a pop-up window. Command line developer tools is a program
#  used to run modeling software. Click Install and then re-run the
#  install.packages(sp) once the install of the tools is finished. This should
#  now successfully load- when it's done, it should say 'DONE(sp)' if it worked.
install.packages('devtools') # this is another R package used to run modeling
#  software. If you get an error message that says, "package ‘devtools’ is not
#  available (for R version x.x.x)", be sure to check that your R software is up
#  to date to the most recent version.
library(sp) # load the packages you just downloaded
library(devtools)
devtools::install_github("CareyLabVT/GLMr", force = TRUE) # Download the GLMr
#  software. This may take a few minutes. If downloaded successfully, you should
#  see "DONE (GLMr)" at the end of the output.
devtools::install_github("CareyLabVT/glmtools", force = TRUE) # This step
# downloads the R packages that allow you to work with GLM in R.
library(glmtools) # Load the two packages that you need to analyze GLM output
#  NOTE: you may get lots of output messages in red at this step- if this worked
#  successfully, you should read a lot of text that starts with: "This
#  information is preliminary or provisional..."
library(GLMr) # If this worked, GLMr should load without error messages. Hooray!
glm_version() # See what version of GLM you are running- should be v.2.x.x
# CONGRATS! You've now succesfully loaded GLM onto your computer!
# Now, we will explore the files that come with your downloaded GLM files
# NOTE! Throughout the rest of the module, you will need to modify some of the
#  lines of code to run on your computer. If you need to modify a line, I put the
#  symbols ##!! at the beginning of that line's annotation.  If you do not see those
#  symbols, you do not need to edit that line of code and can run it as written.
# When working in R, we set the sim_folder to tell R where your files, scripts,
#  and model output are stored.
# To find your folder path, navigate to the 'cross_scale_interactions' folder on
# your Desktop. Right click on the folder that matches your model lake (Mendota or Sunapee),
# then select Properties (Windows) or Get Info (Mac). Look under Location (Windows)
# or Where (Mac) to find your folder path (examples below):
# Windows: C:/Users/KJF/Desktop/cross_scale_interactions/LakeName
# Mac: Users -> careylab -> Desktop -> cross_scale_interactions -> LakeName
sim_folder <- '/Users/quinn/Dropbox/Teaching/Environmental Informatics/Modules/1_CrossScaleEmergence/cross_scale_interactions/Sunapee/' ##!! Edit this line
#  to define the sim_folder location for your model lake. You will need to change
#  the part after Users/ to give the name of your computer (e.g., my computer name
#  is cayelan, but yours will be different!) AND change the word LakeName to be
#  the name of your model lake (Mendota or Sunapee).
setwd(sim_folder) ## This line of code is used to reset your working directory
#  to the sim_folder. The point of this step is to make sure that any new files
#  you create (e.g., figures of output) end up together in this folder.
nml_file <- paste0(sim_folder,"/glm2.nml") # This step sets the nml_file for your
#  simulation to be in the new sim_folder location.
nml <- read_nml(nml_file) # Read in your nml file from your new directory
print(nml) # This shows you what is in your nml file.  This is the 'master script'
#  of the GLM simulation; the nml file tells the GLM model all of the initial
#  conditions about your lake, how you are defining parameters, and more - this
#  is a really important file! There should be multiple sections, including
#  glm_setup, morphometry, meteorology, etc.
plot_meteo(nml_file) # This command plots the meterological input data for the
#  simulation: short wave & long wave radiation, air temp, relative humidity,
#  etc. for the duration of the simulation.
run_glm(sim_folder, verbose=TRUE) # So simple and elegant... if this works, you
#  should see output that says "Simulation begins.." and then shows all the
#  time steps.  At the end, it should say "Run complete" if everything worked
#  ok. This may take a few minutes.
baseline <- file.path(sim_folder, 'output.nc') # This says that the output.nc
#  file is in the sim_folder.
plot_temp(file=baseline, fig_path=FALSE) # This plots your simulated water
#  temperatures in a heat map, where time is displayed on the x-axis, lake depth
#  is displayed on the y-axis, and the different colors represent different
#  temperatures.
# Cross-Scale Interactions Module ####
# This module was initially developed by Carey, C.C. and K.J. Farrell. 13 Aug. 2017.
# Macrosystems EDDIE: Cross-Scale Interactions. Macrosystems EDDIE Module 2, Version 1.
# module2.macrosystemseddie.org
# Module development was supported by NSF EF 1702506.
# R code for students to work through the module activities A, B, and C.
# This module consists of 6 objectives. Activity A consists of Objectives 1-2,
# Activity B consists of Objectives 3-4, & Activity C consists of Objectives 5-6.
########## ACTIVITY A - OBJECTIVE 1 ############################################
# Download R packages and GLM files onto your computer.
#  to date to the most recent version.
library(sp) # load the packages you just downloaded
library(devtools)
?install_github
# Cross-Scale Interactions Module ####
# This module was initially developed by Carey, C.C. and K.J. Farrell. 13 Aug. 2017.
# Macrosystems EDDIE: Cross-Scale Interactions. Macrosystems EDDIE Module 2, Version 1.
# module2.macrosystemseddie.org
# Module development was supported by NSF EF 1702506.
# R code for students to work through the module activities A, B, and C.
# This module consists of 6 objectives. Activity A consists of Objectives 1-2,
# Activity B consists of Objectives 3-4, & Activity C consists of Objectives 5-6.
########## ACTIVITY A - OBJECTIVE 1 ############################################
# Download R packages and GLM files onto your computer.
install.packages('sp') # NOTE: depending on your computer, you may get output
#  that says, "There is a binary version available. Do you want to install from
#  sources that need compilation? y/n" If this pops up, type 'y' (without the
#  quotes) and hit enter. You may now be prompted to download the command line
#  developer tools in a pop-up window. Command line developer tools is a program
#  used to run modeling software. Click Install and then re-run the
#  install.packages(sp) once the install of the tools is finished. This should
#  now successfully load- when it's done, it should say 'DONE(sp)' if it worked.
install.packages('devtools') # this is another R package used to run modeling
#  software. If you get an error message that says, "package ‘devtools’ is not
#  available (for R version x.x.x)", be sure to check that your R software is up
#  to date to the most recent version.
library(sp) # load the packages you just downloaded
library(devtools)
devtools::install_github("CareyLabVT/GLMr", force = TRUE) # Download the GLMr
#  software. This may take a few minutes. If downloaded successfully, you should
#  see "DONE (GLMr)" at the end of the output.
devtools::install_github("CareyLabVT/glmtools", force = TRUE) # This step
# downloads the R packages that allow you to work with GLM in R.
library(glmtools) # Load the two packages that you need to analyze GLM output
#  NOTE: you may get lots of output messages in red at this step- if this worked
#  successfully, you should read a lot of text that starts with: "This
#  information is preliminary or provisional..."
library(GLMr) # If this worked, GLMr should load without error messages. Hooray!
glm_version() # See what version of GLM you are running- should be v.2.x.x
install.packages("sp")
install.packages("devtools")
install.packages("devtools")
glm_version() #
sim_folder <- '/Users/quinn/Dropbox/Teaching/Environmental Informatics/Modules/1_CrossScaleEmergence/cross_scale_interactions/Sunapee/' ##!! Edit this line
#  to define the sim_folder location for your model lake. You will need to change
#  the part after Users/ to give the name of your computer (e.g., my computer name
#  is cayelan, but yours will be different!) AND change the word LakeName to be
#  the name of your model lake (Mendota or Sunapee).
setwd(sim_folder) ## This line of code is used to reset your working directory
#  to the sim_folder. The point of this step is to make sure that any new files
#  you create (e.g., figures of output) end up together in this folder.
nml_file <- paste0(sim_folder,"/glm2.nml") # This step sets the nml_file for your
#  simulation to be in the new sim_folder location.
nml <- read_nml(nml_file) # Read in your nml file from your new directory
print(nml) # Th
plot_meteo(nml_file) # This command plots the meterological input data for the
#  simulation: short wave & long wave radiation, air temp, relative humidity,
#  etc. for the duration of the simulation.
run_glm(sim_folder, verbose=TRUE) # So simple and
